from sklearn.feature_selection import mutual_info_classif
import pandas as pd
import numpy as np
import sklearn.svm as sksvm
import sklearn.ensemble as ske
import sklearn.linear_model as skl
import sklearn.model_selection as skm
from sklearn.feature_selection import SelectKBest
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV

df = pd.read_csv("Features.csv")

feat = df.drop(df.columns[[0, -1]], axis = 1, inplace = False).values
cols = df.columns[1 : -1]
tar = df['Class']
no_features = feat.shape[1]
#remove features not present in any apps
rem = cols[(feat.sum(axis = 0) == 0)]
df.drop(list(rem), axis = 1, inplace = True)

#hyperparameter tuning
model = ske.RandomForestClassifier()
param_grid = {'criterion': ['gini', 'entropy'], 'n_estimators': [100, 300, 500], 'max_features': ['auto', 'log2']}
modelcv = GridSearchCV(estimator = model, param_grid = param_grid)
modelcv.fit(feat, tar)
optimal_parameters = modelcv.best_params_()

def test(feat, tar, f):
    acc = [0, 0, 0, 0]
    m1 = sksvm.SVC(gamma = 'auto')
    m2 = ske.RandomForestClassifier(criterion = 'gini', max_features = 'log2', n_estimators = 300)
    m3 = skl.LogisticRegression(solver = 'lbfgs')
    m4 = KNeighborsClassifier()
    for i in range(10):
        X_train, X_test, Y_train, Y_test = skm.train_test_split(feat, tar, test_size = 0.3)
        Xf_train = f.transform(X_train)
        Xf_test = f.transform(X_test)
        acc[0] += m1.fit(Xf_train, Y_train).score(Xf_test, Y_test)
        acc[1] += m2.fit(Xf_train, Y_train).score(Xf_test, Y_test)
        acc[2] += m3.fit(Xf_train, Y_train).score(Xf_test, Y_test)
        acc[3] += m4.fit(Xf_train, Y_train).score(Xf_test, Y_test)

    return acc

models = {0: 'SVM', 1: 'Random Forest', 2: 'Logistic Regression', 3: 'K Nearest Neighbors'}
for i in range(1, no_features, 50):
    f = SelectKBest(mutual_info_classif, k = i).fit(feat, tar)
    acc = test(feat, tar, f)

    max_acc = max(acc) * 10
    model = models[acc.index(max_acc)]
    features_selected = cols[f.get_support(indices = True)]
    print(max_acc, "% accuracy using ", model, "with ", i, "features")
