import pickle
import numpy as np
import flask
from androguard.misc import AnalyzeAPK
from androguard.core.bytecodes import apk
from lxml.etree import tostring
import re
api_dang = features = model = None
app = flask.Flask(__name__)
app.config["DEBUG"] = True
f_rep = None

def load():
    global model, api_dang, features, f_rep
    with open('MalSVM.pkl', 'rb') as mFile, open('feat', 'rb') as fFile, open('apiMl', 'rb') as aFile:
        model = pickle.load(mFile)
        features = pickle.load(fFile)
        api_dang = pickle.load(aFile)


@app.route('/')
def home():
    return "Enabled"

@app.route('/predict', methods = ['POST'])
def get_prediction():
    f_rep = [0] * 900
    dat = flask.request.get_json()
    name = dat['file_name']
    with open(name, 'rb') as f:
        b = f.read()
        a, d, dx = AnalyzeAPK(b, raw = True)
    perms = str(a.get_permissions())
    perm_count = len(perms)
    app_name = a.get_app_name()
    perms = re.findall(r"(?=.)[A-Z|_]+(?=')", perms)
    for p in perms:
        if p in features:
            f_rep[features.index(p)] = 1
    xml = apk.APK(name).get_android_manifest_xml()
    xml = tostring(xml, encoding = 'unicode')
    intents = re.findall(r'(?<=<intent\-filter>)(.*?)(?=</intent\-filter>)',xml,re.DOTALL)
    for intent in intents:
        ints= (re.findall(r'(?<=\<action android:name=\")([^"]*)"',intent,re.DOTALL))
        for a in ints:
            if a in features:
                f_rep[features.index(a)] = 1
    classes = dx.get_external_classes()
    class_count = len(classes)
    for classObj in classes:
        vmClass = str(classObj.get_vm_class())
        if vmClass not in api_dang:
            continue
        vmMeth = classObj.get_methods()
        for vmMethIter in vmMeth:
            met = str(vmMethIter.method)
            if met in features:
                f_rep[features.index(met)] = 1
    f_rep = np.array(f_rep)[np.newaxis, :]
    pred = model.predict(f_rep)[0]
    response = {"appName": app_name, "class": pred, "permCount": perm_count, "fileName": name, "classCount": class_count}
    response = flask.jsonify(response)
    return response


if __name__ == '__main__':
    load()
    app.run(host='0.0.0.0', port=80)
