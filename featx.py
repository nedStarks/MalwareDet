import sys
import csv
import glob
from androguard.misc import AnalyzeAPK
import re
import pickle as pkl

rootd = r"C:/Users/user/MalwareDEt/train/"
head = ['Filename', 'Permission rate', 'Permissions Count', 'Activities Count', 'Intents Count']
apiDang = [r'<analysis.ExternalClass Landroid/content/BroadcastReceiver;>', r'<analysis.ExternalClass Landroid/content/pm/PackageManager;>', r'<analysis.ExternalClass Landroid/telephony/SmsManager;>', r'<analysis.ExternalClass Landroid/telephony/TelephonyManager;>', r'<analysis.ExternalClass Ldalvik/system/DexClassLoader;>', r'<analysis.ExternalClass Landroid/net/ConnectivityManager;>', r'<analysis.ExternalClass Landroid/net/wifi/WifiManager;>', r'<analysis.ExternalClass Landroid/net/wifi/SupplicantState;>', r'<analysis.ExternalClass Landroid/app/ActivityManager>']

def read_log(CLS):
    logr = open(r"log%s.txt"%(CLS),mode = "r")
    log = logr.read()
    lst = log.split('!!break!!')
    lst.remove('')
    logr.close()
    return lst

def write_log(CLS, filename):
    logw = open(r"log{}.txt".format(CLS),mode = "a")
    logw.write(filename+"!!break!!")
    logw.close()
    return

def featExtract(DIR, CLS):
    files = glob.glob(DIR)
    files = sorted(files)
    done = read_log(CLS)
    count = 0
    print("\nSearching folder ",DIR)
    if set(files).issubset(set(done)):
        print("\nNo new files to extract")
        return
    with open('feat{}.csv'.format(CLS), mode = 'a', newline = '') as ftFile:
        ftWriter = csv.writer(ftFile, delimiter = ',')
        for f in files:
            done = read_log(CLS)
            if f in done:
                print("Skipping file...")
                continue
            print("\n\nOpening file ",f)
            try:
                a, d, dx = AnalyzeAPK(f)
            except:
                print("\nError opening ",f)
                done.append(f)
                continue
            name = a.get_package()
            perms = a.get_permissions()
            permCount = len(perms)
            apiList = []
            classes = dx.get_external_classes()
            for classObj in classes:
                vmClass = str(classObj.get_vm_class())
                if vmClass not in apiDang:
                    continue
                vmMeth = classObj.get_methods()
                for vmMethIter in vmMeth:
                    apiList = apiList + [str(vmMethIter.method)]
            apiList = list(set(apiList))
            activities = a.get_activities()
            actCount = len(activities)
            intents = []
            xml = a.get_android_manifest_axml().get_xml().decode()
            filters = re.findall(r'(?<=<intent\-filter>)(.*?)(?=</intent\-filter>)',xml,re.DOTALL)
            for filter in filters:
                ints= re.findall(r'(?<=\<action android:name=\")([^"]*)"',filter,re.DOTALL)
                for intent in ints:
                    intents.append(intent)
            intents = list(set(intents))
            if '' in intents:
                intents.remove('')
            intCount = len(intents)
            size = sys.getsizeof(a.get_raw()) / 1024 /1024
            pr = permCount / size
            row = [name, pr, permCount , actCount , intCount] + perms + apiList + intents
            ftWriter.writerow(row)
            print(name, "extracted successfully...")
            print("\n\n", len(done) + 1, "files extracted. \n\n")
            write_log(CLS, f)
    return

def featSet(limit):
    with open('featMal.csv', 'r') as malFile, open('featBen.csv', 'r') as benFile:
        malf = {}
        benf = {}
        mReader = csv.reader(malFile, delimiter = ',')
        bReader = csv.reader(benFile, delimiter = ',')
        for mrow in mReader:
            f = mrow[5:]
            for i in f:
                fCount = malf.get(i, 0) + 1
                malf[i] = fCount
        for brow in bReader:
            f = brow[5:]
            for i in f:
                fCount = benf.get(i, 0) + 1
                benf[i] = fCount
    features = list(set(malf.keys()).union(set(benf.keys())))
    rem = 0
    for i in features:
        c = malf.get(i, 0) + benf.get(i, 0)
        if c <= limit:
            features.remove(i)
            rem += 1
    with open("features.pkl", 'wb') as fpFile:
        pkl.dump(features, fpFile)
    print(len(features), "features collected\n", rem, "features removed")
    st = open(r"stats.csv", mode = "w", newline = '')
    rst = csv.writer(st, delimiter = ',')
    rst.writerow(["Feature", "Malware", "Benign"] )
    for i in features:
        m = malf.get(i, 0)
        b = benf.get(i, 0)
        rst.writerow([i, m, b])
    st.close()

def featRep():
    with open("features.pkl", 'rb') as fpFile:
        features = pkl.load(fpFile)
    columns = head[1:] + features + ['Class']
    count = 0
    with open("featMal.csv", mode = 'r') as fMal, open("featBen.csv", mode = 'r') as fBen, open ("features.csv", mode = 'w', newline = '') as feat:
        malReader = csv.reader(fMal, delimiter = ',')
        benReader = csv.reader(fBen, delimiter = ',')
        ftWriter = csv.writer(feat, delimiter = ',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        ftWriter.writerow(columns)
        for app in malReader:
            row = app[1:5]
            count += 1
            for i in features:
                if i in app[5:]:
                    row += [1]
                else:
                    row += [0]
            row += ['M']
            ftWriter.writerow(row)
        for app in benReader:
            row = app[1:5]
            count += 1
            for i in features:
                if i in app[5:]:
                    row += [1]
                else:
                    row += [0]
            row += ['B']
            ftWriter.writerow(row)
        print("Feature vector representation complete\n", count, "apps converted")


print("----------------Menu----------------")
print("\n1. Extract benign applications\n\n2. Extract malware applications\n\n3. Generate feature set\n\n4. Generate feature vector representation\n\n")
ch = input("Enter your choice: ")
if ch == '1':
    featExtract(rootd + "Safe/*.apk", "Ben")
    print("Extracted all benign applications successfully")
elif ch == '2':
    featExtract(rootd + "Malware/*.apk", "Mal")
    print("Extracted all malware applications successfully")
elif ch == '3':
    limit = int(input("\nEnter minimum count: "))
    featSet(limit)
elif ch == '4':
    featRep()
else:
    print("Invalid choice")
